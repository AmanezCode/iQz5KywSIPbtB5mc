import json, io, torch
import numpy as np
import pandas as pd
import streamlit as st
import albumentations as A
import matplotlib.pyplot as plt
import torch.nn.functional as F

from PIL import Image
from pathlib import Path
from albumentations.pytorch import ToTensorV2

from main import EfficientNetCarClassifier

class StreamlitCarClassifier:
    def __init__(self, model_path=None):
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        self.model = None
        self.transforms = None
        self.setup_transforms()
        
        if model_path and Path(model_path).exists():
            self.load_model(model_path)
        else:
            st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
            self.setup_demo_model()
    
    def setup_transforms(self):
        self.transforms = A.Compose([
            A.Resize(224, 224),
            A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
            ToTensorV2(),
        ])
    
    def setup_demo_model(self):
        self.model = EfficientNetCarClassifier(num_cleanliness_classes=3, num_damage_classes=2)
        self.model.eval()
        st.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    
    def load_model(self, model_path):
        try:
            self.model = EfficientNetCarClassifier(num_cleanliness_classes=3, num_damage_classes=2)
            checkpoint = torch.load(model_path, map_location=self.device)
            self.model.load_state_dict(checkpoint['model_state_dict'])
            self.model.to(self.device)
            self.model.eval()
            
            st.success(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å {self.device}")
            
            if 'val_clean_acc' in checkpoint:
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (–ß–∏—Å—Ç–æ—Ç–∞)", f"{checkpoint['val_clean_acc']:.1%}")
                with col2:
                    st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è)", f"{checkpoint.get('val_damage_acc', 0):.1%}")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.setup_demo_model()
    
    def predict(self, image):
        try:
            if isinstance(image, Image.Image):
                image_np = np.array(image.convert('RGB'))
            else:
                image_np = image
            
            transformed = self.transforms(image=image_np)
            image_tensor = transformed['image'].unsqueeze(0).to(self.device)
            
            with torch.no_grad():
                clean_logits, damage_logits = self.model(image_tensor)
                
                clean_probs = F.softmax(clean_logits, dim=1)
                damage_probs = F.softmax(damage_logits, dim=1)
                
                clean_pred = torch.argmax(clean_probs, dim=1).item()
                damage_pred = torch.argmax(damage_probs, dim=1).item()
                
                clean_confidence = torch.max(clean_probs, dim=1)[0].item()
                damage_confidence = torch.max(damage_probs, dim=1)[0].item()
            
            return {
                'cleanliness': {
                    'prediction': clean_pred,
                    'confidence': clean_confidence,
                    'probabilities': clean_probs[0].cpu().numpy()
                },
                'damage': {
                    'prediction': damage_pred,
                    'confidence': damage_confidence,
                    'probabilities': damage_probs[0].cpu().numpy()
                }
            }
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            return None
    
    def create_results_chart(self, results):
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        cleanliness_labels = ['–ß–∏—Å—Ç—ã–π', '–°–ª–µ–≥–∫–∞\n–≥—Ä—è–∑–Ω—ã–π', '–û—á–µ–Ω—å\n–≥—Ä—è–∑–Ω—ã–π']
        damage_labels = ['–¶–µ–ª—ã–π', '–ë–∏—Ç—ã–π']
        
        clean_probs = results['cleanliness']['probabilities']
        bars1 = ax1.bar(cleanliness_labels, clean_probs, 
                       color=['#2ECC71', '#F39C12', '#E74C3C'])
        ax1.set_title('–û—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã', fontsize=14, fontweight='bold')
        ax1.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', fontsize=12)
        ax1.set_ylim(0, 1)
        
        for bar, prob in zip(bars1, clean_probs):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                    f'{prob:.1%}', ha='center', va='bottom', fontweight='bold')
        
        damage_probs = results['damage']['probabilities']
        bars2 = ax2.bar(damage_labels, damage_probs, 
                       color=['#3498DB', '#E74C3C'])
        ax2.set_title('–û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
        ax2.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', fontsize=12)
        ax2.set_ylim(0, 1)
        
        for bar, prob in zip(bars2, damage_probs):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                    f'{prob:.1%}', ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout()
        return fig


@st.cache_resource
def load_classifier():
    model_path = "models/model.pth"
    return StreamlitCarClassifier(model_path)


def setup_page_config():
    st.set_page_config(
        page_title="inDrive: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
        page_icon="üöó",
        layout="wide",
        initial_sidebar_state="expanded"
    )


def render_header():
    st.title("üöó inDrive: –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    st.markdown("### *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*")


def render_sidebar():
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        
        st.markdown("""
        **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
        - üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: EfficientNet-B4
        - üéØ **–ó–∞–¥–∞—á–∏**: –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        - üìä **–ö–ª–∞—Å—Å—ã —á–∏—Å—Ç–æ—Ç—ã**: 3 (–ß–∏—Å—Ç—ã–π, –°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π, –û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π)
        - üîß **–ö–ª–∞—Å—Å—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏**: 2 (–¶–µ–ª—ã–π, –ë–∏—Ç—ã–π)
        
        **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ inDrive:**
        """)
        
        applications = [
            ("üõ°Ô∏è", "**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö"),
            ("‚≠ê", "**–ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞**", "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–∞"),
            ("üì±", "**UX —É–ª—É—á—à–µ–Ω–∏—è**", "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"),
            ("üîî", "**–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º"),
            ("üìà", "**–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥")
        ]
        
        for icon, title, desc in applications:
            st.markdown(f"{icon} {title}: {desc}")
        
        st.markdown("---")
        
        st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ß–∏—Å—Ç–æ—Ç–∞", "87.3%", "2.1%")
        with col2:
            st.metric("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", "91.2%", "1.8%")
        
        st.markdown("---")
        
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        show_probabilities = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", True)
        show_confidence = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", True)
        
        st.header("üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã")
        example_images = {
            "–ß–∏—Å—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å": "https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?w=300",
            "–ì—Ä—è–∑–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å": "https://images.unsplash.com/photo-1558618667-fcd25c85cd64?w=300",
            "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å": "https://images.unsplash.com/photo-1558618047-3c0c6424dd31?w=300"
        }
        
        selected_example = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:", list(example_images.keys()))
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä"):
            st.session_state.example_url = example_images[selected_example]
    
    return show_probabilities, show_confidence


def handle_file_upload():
    st.header("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...", 
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, WEBP. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
    )
    
    with st.expander("üîó –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
        image_url = st.text_input("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ URL") and image_url:
            try:
                import requests
                response = requests.get(image_url)
                image = Image.open(io.BytesIO(response.content))
                st.session_state.url_image = image
                st.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ URL!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    return uploaded_file


def get_image_to_process(uploaded_file):
    image_to_process = None
    
    if uploaded_file is not None:
        image_to_process = Image.open(uploaded_file)
    elif hasattr(st.session_state, 'url_image'):
        image_to_process = st.session_state.url_image
    elif hasattr(st.session_state, 'example_url'):
        try:
            import requests
            response = requests.get(st.session_state.example_url)
            image_to_process = Image.open(io.BytesIO(response.content))
        except:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    return image_to_process


def display_image_info(image):
    st.write("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:**")
    st.write(f"- –†–∞–∑–º–µ—Ä: {image.size[0]}√ó{image.size[1]} px")
    st.write(f"- –§–æ—Ä–º–∞—Ç: {image.format}")


def display_results_metrics(results, show_confidence):
    cleanliness_labels = ['–ß–∏—Å—Ç—ã–π', '–°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π', '–û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π']
    damage_labels = ['–¶–µ–ª—ã–π', '–ë–∏—Ç—ã–π']
    
    clean_pred = results['cleanliness']['prediction']
    damage_pred = results['damage']['prediction']
    
    clean_label = cleanliness_labels[clean_pred]
    damage_label = damage_labels[damage_pred]
    
    clean_conf = results['cleanliness']['confidence']
    damage_conf = results['damage']['confidence']
    
    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    col_clean, col_damage = st.columns(2)
    
    with col_clean:
        if clean_pred == 0:
            color = "üü¢"
        elif clean_pred == 1:
            color = "üü°"
        else:
            color = "üî¥"
        
        st.metric(
            label=f"{color} –ß–∏—Å—Ç–æ—Ç–∞",
            value=clean_label,
            delta=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {clean_conf:.1%}" if show_confidence else None
        )
    
    with col_damage:
        color = "üü¢" if damage_pred == 0 else "üî¥"
        st.metric(
            label=f"{color} –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", 
            value=damage_label,
            delta=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {damage_conf:.1%}" if show_confidence else None
        )
    
    return clean_pred, damage_pred, clean_label, damage_label, clean_conf, damage_conf


def display_recommendations(clean_pred, damage_pred):
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    
    recommendations = []
    
    if clean_pred >= 2:
        recommendations.append("üî¥ **–ö—Ä–∏—Ç–∏—á–Ω–æ**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–π–∫–∏")
    elif clean_pred >= 1:
        recommendations.append("üü° **–í–Ω–∏–º–∞–Ω–∏–µ**: –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é —É—Å–ª—É–≥–∏ –º–æ–π–∫–∏")
    else:
        recommendations.append("üü¢ **–û—Ç–ª–∏—á–Ω–æ**: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    
    if damage_pred >= 1:
        recommendations.append("üî¥ **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        recommendations.append("üì± **UX**: –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö")
    else:
        recommendations.append("üü¢ **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –í–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    for rec in recommendations:
        st.markdown(rec)


def create_export_section(clean_label, clean_conf, clean_pred, damage_label, damage_conf, damage_pred, show_probabilities, fig=None):
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col_exp1, col_exp2, col_exp3 = st.columns(3)
    
    with col_exp1:
        result_json = {
            "timestamp": str(pd.Timestamp.now()),
            "cleanliness": {
                "label": clean_label,
                "confidence": float(clean_conf),
                "class_id": int(clean_pred)
            },
            "damage": {
                "label": damage_label, 
                "confidence": float(damage_conf),
                "class_id": int(damage_pred)
            }
        }
        
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å JSON",
            data=json.dumps(result_json, indent=2, ensure_ascii=False),
            file_name="car_analysis.json",
            mime="application/json"
        )
    
    with col_exp2:
        df_result = pd.DataFrame([{
            'timestamp': pd.Timestamp.now(),
            'cleanliness_label': clean_label,
            'cleanliness_confidence': clean_conf,
            'damage_label': damage_label,
            'damage_confidence': damage_conf
        }])
        
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å CSV",
            data=df_result.to_csv(index=False),
            file_name="car_analysis.csv",
            mime="text/csv"
        )
    
    with col_exp3:
        if show_probabilities and fig is not None:
            img_buffer = io.BytesIO()
            fig.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
            img_buffer.seek(0)
            
            st.download_button(
                label="üñºÔ∏è –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                data=img_buffer.getvalue(),
                file_name="analysis_chart.png",
                mime="image/png"
            )


def display_examples():
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    st.subheader("üé• –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
    
    example_cols = st.columns(3)
    examples_data = [
        ("–ß–∏—Å—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "üü¢ –ß–∏—Å—Ç—ã–π", "üü¢ –¶–µ–ª—ã–π", "95%"),
        ("–ì—Ä—è–∑–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "üî¥ –û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π", "üü¢ –¶–µ–ª—ã–π", "88%"),  
        ("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "üü° –°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π", "üî¥ –ë–∏—Ç—ã–π", "92%")
    ]
    
    for i, (title, clean_res, damage_res, conf) in enumerate(examples_data):
        with example_cols[i]:
            st.markdown(f"**{title}**")
            st.markdown(f"–ß–∏—Å—Ç–æ—Ç–∞: {clean_res}")
            st.markdown(f"–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {damage_res}")
            st.markdown(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf}")


def render_footer():
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: gray;'>
        <p>üöó <b>inDrive Car Condition Classifier</b> | Powered by EfficientNet-B4 | 
        <a href='https://github.com/indrive' target='_blank'>GitHub</a> | 
        <a href='https://indrive.com' target='_blank'>inDrive</a></p>
        <p><i>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞</i></p>
    </div>
    """, unsafe_allow_html=True)


def main():
    setup_page_config()
    render_header()
    
    show_probabilities, show_confidence = render_sidebar()
    
    uploaded_file = handle_file_upload()
    image_to_process = get_image_to_process(uploaded_file)
    
    if image_to_process is not None:
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.image(image_to_process, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
            display_image_info(image_to_process)
            
        with col2:
            with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å..."):
                classifier = load_classifier()
            
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                results = classifier.predict(image_to_process)
            
            if results:
                clean_pred, damage_pred, clean_label, damage_label, clean_conf, damage_conf = display_results_metrics(
                    results, show_confidence
                )
                
                fig = None
                if show_probabilities:
                    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    fig = classifier.create_results_chart(results)
                    st.pyplot(fig)
                    plt.close()
                
                display_recommendations(clean_pred, damage_pred)
                
                create_export_section(
                    clean_label, clean_conf, clean_pred, 
                    damage_label, damage_conf, damage_pred, 
                    show_probabilities, fig
                )
    else:
        display_examples()
    
    render_footer()


if __name__ == "__main__":
    main()